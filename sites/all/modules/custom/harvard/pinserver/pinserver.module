<?php

include_once( 'includes/pinserver.api.inc');

/**
 * Implementation of hook_menu().
 */
function pinserver_menu() {
  $path = drupal_get_path('module', 'pinserver');
  $items = array();

  $items['pinserver/auth'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'pinserver_check_user',
    'access callback' => TRUE,
  );
  
  $items['pinserver/error'] = array(
    'type' => MENU_CALLBACK,
    'title' => t('Authentication Error'),
    'page callback' => 'pinserver_error',
    'access callback' => TRUE,
  );
    
  $items['admin/settings/pinserver'] = array(
    'title' => t('Pinserver'),
    'description' => t('Modify Harvard Pinserver configuration, access, and logging'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinserver_config'),
    'access arguments' =>  array('administer pinserver'),
   'file' => 'pinserver.admin.inc',
    'file path' => $path,
  );

  return $items;
}

/**
 * Implementation of hook_perm()
 *
 * @return array - permissions set for the pinserver module
 */
function pinserver_perm(){
  return array('administer pinserver');
}

/*
 * Implementation of hook_theme()
 */
function pinserver_theme() {
  return array(
  'pinserver_token_error' => array(
  'arguments' => array('values' => NULL)
  ),
  );
}

/**
 * Redirect user to PIN login url
 */
function pinserver_redirect() {
  $pin_redirect = variable_get('pinserver_pin_url','').'?__authen_application='.variable_get('pinserver_app_name','');
  drupal_goto($pin_redirect);
}

/**
 * First function called after user has authenticated via pinserver and returned to site
 */
function pinserver_check_user(){

  // First, parse and validate the PIN token.
  $token_data = pinserver_check_token();
  
  //Uncomment to fake auth locally
  //unset($token_data['errors']);

  // If any errors are returned, redirect to an error page.
  if (is_array($token_data) && count($token_data['errors']) > 0) {
    $errors = implode(',', array_unique($token_data['errors']));
    drupal_goto("pinserver/error/token/$errors");
    exit();
  }
  //if successful pin authentication, place the encrypted harvard uid into a session array
  $_SESSION['pinserver']['huid'] = $token_data['user_id'];
  //add time value to session array
  $_SESSION['pinserver']['reg_time'] = time();
  
  
  //hook for dynamic landing path, if no hooks fired, then use static landing path
  $path = module_invoke_all('pinserver_landing_path');
  $landing_path = !empty($path) ? end($path) : variable_get('pinserver_landing_path','');
  
  //invoke hook_pinserver after sucessful pin login and token authentication
  module_invoke_all('pinserver');
    
  //redirect user to landing page that was set in pinserver configuration page
  drupal_goto($landing_path);
}
 
/**
 * This function prepares the unencrypted PIN v1 token for authentication.
 * @return authentication parameters and signature in a single array.
 */
function pinserver_prepare_pin_v1_token() {
  $values = array();

  // Collect URL parameters
  $app = $_GET['__authen_application'];
  $user_id = $_GET['__authen_huid'];
  $proxy_id = "";
  $ip = $_GET['__authen_ip'];
  $time = $_GET['__authen_time'];
  $pgp_signature = $_GET['__authen_pgp_signature'];
  $pgp_version = $_GET['__authen_pgp_version'];

  // Construct the auth token from the returned URL arguments from PIN server.
  $values['token'] = $app ."|". $user_id ."|". $proxy_id ."|". $ip ."|". $time;

  // The signature is passed as is.
  $values['pgp_signature'] = $pgp_signature;
  
  // User ID is returned as a hash for safer storage.
  $values['user_id'] = (variable_get('pinserver_hash_huid', 0) === 1) ? md5($user_id) : $user_id;

  // Time must be converted into unix timestamp.
  $exploded_time = explode(" ", $time);
  $values['time'] = strtotime($exploded_time[1]." ".$exploded_time[2]." ".$exploded_time[5]." ".$exploded_time[3]);

  // Client IP is returned as is.
  $values['ip'] = $ip;

  // App Name is returned as is.
  $values['app'] = $app;

  // ID type is returned as PIN.
  $values['login_type'] = 'PIN';
  
  //set appropriate good signature string for this type of token
  $values['good_sig'] = variable_get('pinserver_auth_str', '');

  return $values;
}

/**
 * This function prepares the unencrypted PIN v2 token for authentication.
 * @return authentication parameters and signature in a single array.
 */
function pinserver_prepare_pin_v2_token($pin_parameters, $pin_signature) {
  $values = array();

  // Deconstruct parameters from the authentication token.
  $token_array = explode($pin_parameters, '|');

  // The token data is passed as is.
  $values['token'] = $pin_parameters;

  // The signature is passed as is.
  $values['pgp_signature'] = $pgp_signature;
  
  // App Name is returned as is.
  $values['app'] = $token_array[0];

  // User ID is returned as a hash for safer storage.
  $values['user_id'] =  (variable_get('pinserver_hash_huid', 0) === 1) ? md5($token_array[1]) : $token_array[1];

  // Unused parameter proxy_id
  // $values['proxy_id'] = $token_array[2];

  // Client IP is returned as is.
  $values['ip'] = $token_array[3];

  // Time must be converted into unix timestamp.
  $exploded_time = explode(" ", $token_array[4]);
  $values['time'] = strtotime($exploded_time[1]." ".$exploded_time[2]." ".$exploded_time[5]." ".$exploded_time[3]);

  // Unused parameter "blank"
  // $token_array[5]

  // ID type is returned as is.
  $values['login_type'] = $token_array[6];
  
  //set appropriate good signature string for this type of token
  $values['good_sig'] = variable_get('pinserver_auth_str', '');

  return $values;
}


/**
 * pinserver_check_token()
 *
 * This function serves to check all components of the returned token in compliance with the
 * Harvard UIS procedures speficied at: http://www.pin.harvard.edu/dev-guide-token.shtml
 * It is instantiated when the user has just logged in via the Harvard PIN server and has now
 * been returned to the Drupal site
 *
 * @return if the detached signature is deemed good, it returns "pinserver_check_user($user_id)". Otherwise
 * it prohibits the user from logging in.
 */
function pinserver_check_token(){

  // Initialize the return values.
  $return = array('errors' => array());

  /*
   * Prepare token differently depending on the token type and version
   */
  // Pin Token Version 2
  if ($pin_parameters = $_GET['__authen_parameters'] && $pin_signature = $_GET['__authen_pgp_signature']) {
    $values = pinserver_prepare_pin_v2_token($pin_parameters, $pin_signature);
  }
  // Pin Token Version 1
  else if ($_GET['__authen_huid']) {
    $values = pinserver_prepare_pin_v1_token();
  }
  else {
    drupal_goto("pinserver/error/token/unrecognized-url");
    exit();
  }
  
  $pgp_message = "-----BEGIN PGP SIGNED MESSAGE-----"."\n";
  $pgp_message .= "Hash: SHA1"."\n";
  $pgp_message .= "\n";
  $pgp_message .= $values['token']."\n";
  $pgp_message .= "-----BEGIN PGP SIGNATURE-----"."\n";
  $pgp_message .= "Version: 5.0"."\n";
  $pgp_message .= "\n";
  $pgp_message .= $values['pgp_signature'] ."\n";
  $pgp_message .= "-----END PGP SIGNATURE-----"."\n";

  $stdout = "";
  $stderr = "";

  // Use gnupg to verify signature.
  $descriptorspec = array(
    0 => array('pipe', 'r'), // stdin
    1 => array('pipe', 'w'), // stdout
    2 => array('pipe', 'w') // stderr
  );

   $process = proc_open("gpg --homedir '".variable_get('pinserver_gpg_dir', dirname(__FILE__) . '/.gnupg')."' --verify", $descriptorspec, $pipes);
   
  if (!is_resource($process)) {
    $values['errors'][] = 'signature';
    $values = implode(',', array_unique($values['errors']));
    drupal_goto("pinserver/error/token/$values");
    exit();
  }

 fwrite($pipes[0], $pgp_message);
  fclose($pipes[0]);
  fclose($pipes[1]);

  // read stderr ;
  while (!feof($pipes[2])) {
    $stderr .= fgets($pipes[2], 1024);
  }
  fclose($pipes[2]);
  $return_value = proc_close($process);

  /**
   * Save errors to file if set in configuration options and file exists.
   * File should be placed below root, recommended only for development/testing.
   */
  if(variable_get('pinserver_error_log','/tmp/gpgerror') !== ''){
    $fp = fopen(variable_get('pinserver_error_log','/tmp/gpgerror'), 'w');
    fwrite($fp, $stderr);
    fclose($fp);
  }
  
  if(strlen($stderr) && strstr($stderr,"fatal") && variable_get('pinserver_error_email','') !== ''){
    mail(
      variable_get('pinserver_error_email',''),
      mime_header_encode("Pinserver Error"),
      str_replace("\r", '', $stderr)
    );
  }

  // If good signature statement is not found within gpg output
  // or exit code from process is not 0, then it is a bad signature.
  if (strpos($stderr,  $values['good_sig']) === false || $return_value != 0) {
  	print "Good[{$values['good_sig']}] Mine[$stderr]";
    $values['errors'][] = 'signature';
  }

  /*
  Now that PGP Signature has been verified, all other token components
  that require validation must be processed, as specified by the HU directory
  services developer's manual: http://www.pin.harvard.edu/dev-guide-token.shtml
  This includes checking the following URL parameters:
  1) __authen_application / "Application Id" must match the application name
  2) __authen_ip / "Ip Address" must match the IP address of the current user
  3) __authen_time / "Timestamp" is valid and not more than a few minutes old
  */

  // Verify application name.
  if ($values['app'] != variable_get('pinserver_app_name','')) {
    $values['errors'][] = 'name';
  }
  
  if (variable_get('pinserver_ip_validation', 1) == 1) {
    // Verify current user's IP address.
    if ( $values['ip'] !== $_SERVER['REMOTE_ADDR'] ) {
      $values['errors'][] = 'ip-mismatch';
    }
  }
  
  // Verify time parameter is not longer than 2 minutes old.
  // The PHP abs() function converts integers to absolute values (unsigned).
  // Subtract timestamp value sent by PIN server from the current time (on web server)
  // 120 equals 2 minutes; could change this to 60 but no more than 180
  if(abs($values['time'] - time()) > 120) {
    $values['errors'][] = 'time-elapsed';
  }
  //echo "<pre>"; print_r($values); die;
  return $values;
}

/**
 * Fucntion to check system settingx
 */
function pinserver_check_system_settings(){
  
  $settings = array(
  'PIN_URL' => variable_get('pinserver_pin_url',''),
  'PIN_LANDING_PATH' =>  variable_get('pinserver_landing_path',''),
  'PIN_AUTH_STR' => variable_get('pinserver_auth_str', ''),
  'GPG_DIR' => variable_get('pinserver_gpg_dir', dirname(__FILE__) . '/.gnupg'),
  'GPG_BIN' => variable_get('pinserver_gpg_bin','/usr/bin/gpg'),
  );

  $info = array(
  'value' => true,
  'message' => '',
  );
  
  //check to see if all settings are set
  foreach ($settings as $key => $setting){
    if (empty($setting)){
      $missing_settings[] = strtolower($key);
    }
  }
  if (count($missing_settings)){
    $message = 'ALERT: scholar pinserver is missing system settings: ';
    foreach($missing_settings as $setting){
      $message .= $setting . ' ';
    }
    $info['value'] = false;
    $info['message'] = $message . '. ';
  }

  if (!is_dir(variable_get('pinserver_gpg_dir', dirname(__FILE__) . '/.gnupg'))){
    $message = 'The system path for gpg_dir directory is invalid or does not exist.';
    $info['value'] = false;
    $info['message'] .= $message;
  }
 
  return $info;
}

/**
 * Log error and display message
 * @param  string $type - string to identify message type to display
 * @param  string $values - comma separated list of errors encountered
 */
function pinserver_error($type, $values) {
  switch ($type) {
    case 'token':
      //log the errors
      error_log("The pinserver module has errored in processing the token in the following categories: $values");
      return theme('pinserver_token_error', explode(',', $values));
      break;
    default:
      return '';
  }
}

/*
 * theme_pinserver_token_error()
 * @param  array $values - all errors that occured due to a problem with the token or token processing.
 */
function theme_pinserver_token_error($values = NULL) {
  $message = '<p>Communication with the Harvard PIN server failed.';
  if (in_array('ip-mismatch', $values)) {
    error_log("The pinserver module found an ip-mismatch comparing url IP {$_GET['__authen_ip']} to remote address {$_SERVER['REMOTE_ADDR']} ");
    $message .= ' Note: Use of a VPN or tunnel connection may cause problems with PIN authentication.';
  }
  $message .= ' Please '. l('try again', variable_get('pinserver_pin_url','') .'?__authen_application='. variable_get('pinserver_app_name',''));
  if (valid_email_address(variable_get('pinserver_support_contact',''))) {
    $message .= ' or ' . l('contact us.', 'contact');
  }
  $message .= '.</p>';
  return $message;
}

