<?php 

/**
 * @file os_l10n.install
 * 
 * Provides up to date translations as part of installation process
 */

require_once 'os_l10n.inc';

/**
 * implementation of hook_install()
 */
function os_l10n_install() { 
}

/**
 * implementation of hook_requirements
 * Enter description here ...
 * @param string $phase
 */
function __os_l10n_requirements($phase) {
  _os_l10n_include($phase);
  $t = get_t();
  // Get current locale. We only support one at a time
  $locale = _os_l10n_locale($phase);

  if ($phase == 'install') {
    $requirements['translation'] = array(
      'title' => $t('Translation is available'),
    );
    $file_path = "/$locale.po";
    $variables = array(
      '%filepath' => $file_path,
      '%server' => OS_L10N_SERVER,  //OS l10n server has installer translations 
      '%language' => $locale,
    );
    if (is_readable($file_path)) {
      $requirements['translation']['description'] = $t('A translation file has been found: %filepath', $variables);
      $requirements['translation']['severity'] = REQUIREMENT_OK;
      return $requirements;
    }
    else {
      // Check server connectivity and available downloads
      if ($error = _os_l10n_ping_server(OS_L10N_SERVER)) {
        $description[] = $t('We cannot connect with the translation server at %server.', $variables);
        $description[] = $error;
        $status = REQUIREMENT_ERROR;        
      }
      elseif ($url = _os_l10n_download_url($locale)) {
        $description[] = $t('The chosen language(%language) is available for downloading at the translation server. It will be downloaded automatically from %server.', $variables);
        $status = REQUIREMENT_OK;        
      }
      else {
        $description[] = $t('The chosen language(%language) is not supported by the translation server %server.', $variables);
        $status = REQUIREMENT_ERROR;        
      }  

      $description[] = $t('Alternatively you can download a translation file and drop it into %filepath.', $variables);
      $requirements['translation']['description'] = implode('<br />', $description);
      $requirements['translation']['severity'] = $status;
      return $requirements;
    }

  }
}

/**
 * Get current locale
 */
function _os_l10n_locale($phase = 'runtime') {
  global $install_locale;
  global $language;

  if ($phase == 'install' && isset($install_locale)) {
    return $install_locale;
  }
  elseif(!empty($language)) {
    return $language->language;
  }
}

/**
 * include l10n_update library
 * wrapper for require_once since module may or may not be installed yet
 */
function _os_l10n_include($phase = 'runtime') {
  static $done;
  
  if (isset($done)) { 
    return; 
  } elseif ($phase == 'runtime') {
    $filename = drupal_get_path('module', 'l10n_update') . '/l10n_update.inc'; //file exists in profile, not in modules.  maybe it's not loading
  } else {
    $files = drupal_system_listing('l10n_update.inc$', 'modules');
    $file = current($files);
    $filename = $file->filename;
  }
  
  if (!empty($filename) && is_readable($filename)) {
    $req = require_once $filename;
    $done = TRUE;
  }
}

/**
 * Ping the translation server. Installer safe version.
 *
 * @return string
 *   Error message if something went wrong
 */
function _os_l10n_ping_server($url) {
  _os_l10n_include('install');
  $t = get_t();
  $response = l10n_update_http_request('http://'.$url);
  if (!empty($response->error)) {
    return $t('Error @number: %message', array('@number' => $response->code, '%message' => $response->error));
  }
}

/**
 * Get download URL
 */
function _os_l10n_download_url($locale) {
  if ($release = _os_l10n_default_release($locale)) {
    return $release['download_link'];
  }
}

/**
 * Get default release for downloading and check download link
 */
function _os_l10n_default_release($locale) {
    /* not sure about this line.  
   * atrium had a project for the entirety of atrium.  how would we do that?
   * or is this just for the profile project
   */

  $release = l10n_update_project_get_release('os', $locale, OS_L10N_VERSION, 'http://'.OS_L10N_SERVER);
  if ($release && !empty($release['download_link'])) {
    return $release;
  }
}


