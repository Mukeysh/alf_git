<?php

include_once('vsite_design.features.inc');

/**
 * Implementation of hook_menu
 */
function vsite_design_menu(){
  $items = array();
  
  $items['cp/appearance'] = array(
    'title' => "Appearance",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vsite_design_theme_picker_form'),
    'menu_name' => 'cp',
    'file' => 'vsite_design.pages.inc',
    'access callback' => 'cp_access_cp',
    'weight' => 20,
  );
  
  $items['cp/appearance/theme'] = array(
    'title' => t('Theme'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vsite_design_theme_picker_form'),
    'menu_name' => 'cp',
    'file' => 'vsite_design.pages.inc',
    'access callback' => 'cp_access_cp',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 20,
  );

  $items['cp/settings/theme/swap_screenshot/%'] = array(
    'page callback' => 'vsite_design_swap_screenshot',
    'page arguments' => array(4),
    'access callback' => 'cp_access_cp',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 *
 * The access to the private / public themes are granted based on this
 * special permissions
 * TODO: is this function supposed to be named this?
 */
function pvsite_design_perm() {
  return array('access private scholar themes');
}


/**
 * hook_theme
 */
function vsite_design_theme(){
  $path = drupal_get_path('module', 'vsite_design') .'/theme';

  $items = array();
  $items['vsite_design_theme_picker'] = array(
    'arguments' => array('info' => array(), 'sub_theme' => ''),
    'template' => 'vsite_design-theme-picker',
    'path' => $path,
  );

  $items['vsite_design_theme_form'] = array(
    'arguments' => array('form' => NULL),
  );

  return $items;
}

/**
 * Implementation of hook_imagecache_default_presets().
 */
function vsite_design_imagecache_default_presets() {
  $presets = array();
  $presets['vsite_design_default_logo'] = array (
    'presetname' => 'vsite_design_default_logo',
    'actions' => array (
      0 => array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale_image',
        'data' => array (
          'width' => '700',
          'height' => '600',
        ),
      ),
    ),
  );
  $presets['vsite_design_square_logo'] = array (
    'presetname' => 'vsite_design_square_logo',
    'actions' => array (
      0 => array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale_and_crop',
        'data' => array (
          'width' => '140',
          'height' => '140',
        ),
      ),
    ),
  );
  $presets['vsite_design_landscape_logo'] = array (
    'presetname' => 'vsite_design_landscape_logo',
    'actions' => array (
      0 => array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale_and_crop',
        'data' => array (
          'width' => '180',
          'height' => '140',
        ),
      ),
    ),
  );
  $presets['vsite_design_portrait_logo'] = array (
    'presetname' => 'vsite_design_portrait_logo',
    'actions' => array (
      0 => array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale_and_crop',
        'data' => array (
          'width' => '140',
          'height' => '180',
        ),
      ),
    ),
  );
  return $presets;
}

/**
 * Make sure that the css files are preprocessed correctly
 *
 * @param $vars
 * @return unknown_type
 */
function vsite_design_preprocess_page(&$vars){
  //Return if:
  if (! ($vsite = vsite_get_vsite()) || //In a Vsite?
      context_isset('context','vsite-section-cp') || //We are in CP?
      ! $vsite->group->og_theme || //Grop has a custom theme
      ! ($themes = list_themes()) || ! array_key_exists($vsite->group->og_theme, $themes) || //The theme is valid
      empty($themes[$vsite->group->og_theme]->stylesheets))
        return; //The theme has styles associated


  // Add stylesheets used by this theme, without preprocessing
  foreach ( $themes[$vsite->group->og_theme]->stylesheets as $media => $stylesheets ) {
    foreach ( $stylesheets as $name => $stylesheet )
      drupal_add_css($stylesheet, 'theme', $media, false);
  }

  // load the css for the theme flavor
  $flavor = variable_get('vsite_design_'.$vsite->group->og_theme.'_flavor', '');

  $theme_flavors = vsite_design_get_flavors($vsite->group->og_theme);
	if ($flavor && isset($theme_flavors[$flavor])) {

		if(!array_key_exists('css',$theme_flavors[$flavor])) {
		  $theme_flavors[$flavor]['css'] = array(); //Default
		}

    foreach ($theme_flavors[$flavor]['css'] as $s_css){
    	drupal_add_css($theme_flavors[$flavor]['path'].'/'.$s_css, 'theme', 'all', false);
    }

    if(array_key_exists('conditional-css',$theme_flavors[$flavor])){
    	global $conf;
      $conf['conditional_styles_'.$theme_flavors[$flavor]['module']] = $conf['conditional_styles_'.$theme_flavors[$flavor]['module']].
                                                                         _vsite_design_get_conditional_styles($theme_flavors[$flavor]['conditional-css'],$theme_flavors[$flavor]['path']);
    }//Add the flavors conditional style

  }


  $vars['css'] = drupal_add_css();
  $vars['styles'] = drupal_get_css();
}

/**
 * The main theme for the "theme selector" form
 * @param $form
 * @return string html
 */
function theme_vsite_design_theme_form($form) {

	$output = drupal_render($form['vsite_design_maintheme']);

	//UL List
	$output .= '<ul class = "theme-picker"><h2>Theme Picker</h2>(To choose a theme click on a tumbnail, then click the Save button at the bottom of the screen)<br><br>';
	foreach ($form['vsite_design_maintheme']['#enabled_themes'] as $o_theme){
		$s_sub_theme = '';
		$a_info = array_merge((array)$o_theme->info, array('theme_name'=>$o_theme->name));

		if(array_key_exists('vsite_design_'.$o_theme->name.'_flavor',$form)){
			$s_sub_theme =  drupal_render($form['vsite_design_'.$o_theme->name.'_flavor']);

			if($s_flavor = $form['vsite_design_'.$o_theme->name.'_flavor']['#default_value']){
				$theme_flavors = vsite_design_get_flavors();

				if(array_key_exists($s_flavor,$theme_flavors) && array_key_exists('screenshot',$theme_flavors[$s_flavor]) && $theme_flavors[$s_flavor]['module'] == $o_theme->name){
				  $a_info['screenshot'] = $theme_flavors[$s_flavor]['path']."/".$theme_flavors[$s_flavor]['screenshot'];
			  }//Should we use the flavor screenshot?

			}//Is a sub-flavor set?
		}//Are there flavors to select from?

		$output .= '<li class = "item-theme-picker '.(($o_theme->name == $form['vsite_design_maintheme']['#default_value'])?'current':'').'" id="maintheme-'.str_replace('_','-',$o_theme->name) .'">' .
		             theme('vsite_design_theme_picker', $a_info ,$s_sub_theme) .
		           '</li>';
	}
	$output .= '</ul>';

	$output .= drupal_render($form); //Anything we havn't rendered

  return $output;
}

/**
 * The function that handles the swap of the screenshot
 * @param string $s_theme_name
 * @return array html
 */
function vsite_design_swap_screenshot($s_theme_name){
	$s_flavor = $_POST ['ctools_changed']; //The Flavor

	ctools_include ( 'ajax' );
  ctools_add_js ( 'ajax-responder' );

  $s_screenshot_file = drupal_get_path('theme',$s_theme_name)."/screenshot.png"; //Default

  if(strlen($s_flavor)){
  	$theme_flavors = vsite_design_get_flavors();
  	if(array_key_exists($s_flavor,$theme_flavors) && array_key_exists(screenshot,$theme_flavors[$s_flavor])){
  	  $s_screenshot_file = $theme_flavors[$s_flavor]['path'] ."/". $theme_flavors[$s_flavor]['screenshot'];
  	}
  }

  $s_screenshot_html = theme('image', $s_screenshot_file, t('Screenshot for the theme'), '', array('class' => 'screenshot', 'id' => 'screenshot_'.$s_theme_name), FALSE);

  $commands = array ();
  $commands [] = ctools_ajax_command_replace ( "img#screenshot_{$s_theme_name}", $s_screenshot_html);
  ctools_ajax_render ( $commands );
}


/**
 * Fetch metadata on a specific theme plugin / or all themes
 *
 * @param $theme_name (optional)
 *   The ID of the them to retrieve
 *
 * @return
 *   An array with information about the requested flavors for a theme
 *
 * @author rbrandon
 */
function vsite_design_get_flavors($theme_name = false) {

  static $a_plugins;

  if(!isset($a_plugins)){
  	ctools_include('plugins');
    $a_plugins = ctools_get_plugins('vsite_design', 'flavor');
  }

  if(!$theme_name){
  	return $a_plugins;
  }

  //Get just the plugins for a specific theme
  static $a_theme_plugins;
  if(!isset($a_theme_plugins)){
  	foreach ($a_plugins as $s_key => $a_info) $a_theme_plugins[$a_info['module']][$s_key] = $a_info;
  }

  if(!is_array($a_theme_plugins)) return array();

  return array_key_exists($theme_name,$a_theme_plugins)? $a_theme_plugins[$theme_name] : array();

}

/**
 * @author rbrandon
 *
 * Inform CTools that the flavor plugin can be loaded from themes and that
 * plugin implementors should use inf files instead of inc files (to keep PHP code from getting executed)
 */
function vsite_design_ctools_plugin_flavor() {
  return array(
    'load themes' => true,
    'info file' => true,
    'extension' => 'flav',
  );
}

/**
 * Implementation of hook_purl_provider().
 * This provides the theme provider for previewing changes
 */
function vsite_design_purl_provider() {
  $items = array();
  $items['vsite_theme_preview'] = array(
    'name' => 'Preview Theme Provider',
    'description' => t('Provites the ability to preview theme changes.'),
    'callback' => 'vsite_design_activate_preview',
    'callback arguments' => array('preview_type'),
    'example' => 'theme_preview',
  );

  return $items;
}

/**
 * Context provider callback to activate preview.
 *
 * @param $s_preview_type
 * This will hold the query param "value", so you can switch between preview types
 */
function vsite_design_activate_preview($type, $s_preview_type) {

    switch ($s_preview_type){
      case 'full':
        //Do somthing to make the preview different

      break;
    }

}

/**
 * Return the css for conditional style sheets
 * This adds to the functionality provided by the zen theme
 *
 * @param $a_conditional_css array of style sheets
 * @param $s_base_path path where the css resides
 * @return string
 */
function _vsite_design_get_conditional_styles($a_conditional_css,$s_base_path){
	$conditional_styles = "";
	$query_string = '?'. substr(variable_get('css_js_query_string', '0'), 0, 1);

  foreach ($a_conditional_css as $condition => $css) {
    // Each condition requires its own set of links.
    $output = '';
    foreach ($css as $media => $a_files) {
      foreach ($a_files as $s_file) {
       // Don't allow non-existent stylesheets to clutter the logs with 404.
       if (file_exists("$s_base_path/$s_file")) {
          $output .= "<link type=\"text/css\" rel=\"stylesheet\" media=\"{$media}\" href=\"/{$s_base_path}/{$s_file}{$query_string}\" />\n";
       }
      }
    }
    if ($output) {
      $conditional_styles .= "<!--[$condition]>\n$output<![endif]-->\n";
    }
  }

  return $conditional_styles;
}


