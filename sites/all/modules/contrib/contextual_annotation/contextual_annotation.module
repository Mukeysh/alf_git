<?php

function contextual_annotation_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {

  switch ($op) {
    case 'view':
    	if(!$teaser) break;
    	
		  foreach (ctools_get_plugins('contextual_annotation', 'type') as $index => $a_type) {
		  	if(!$a_type['title']) continue;
		  	
		  	$annotation_type = contextual_annotation_get_type($index);
		    $key = contextual_annotation_get_key($index,$node);
		    if($key){
		      $annotation = contextual_annotation_get_annotation($annotation_type->type(),$key,$node->nid);
		      if($annotation){
		      	$key = (array_key_exists('teaser',$node->content))? 'teaser':'body';
			      $node->content[$key]["#{$annotation->position}"] = " <span class='context-annotation'>".t($annotation->annotation)."</span> ";
		      }
		    }
		  }
    break;
    case 'delete':
      contextual_annotation_delete_node_annotations($node->nid);
    break;
  }
}

/**
 *  Implementation of hook_menu()
 */
function contextual_annotation_menu() {

  $items['contextual_annotation/%ctools_js/annotate/%/%/%'] = array(
      'title' => 'Annotate',
      'page callback' => 'contextual_annotation_annotate_form',
      'page arguments' => array(1,3,4,5),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['contextual_annotation/%ctools_js/annotate/%/%/%/%'] = array(
      'title' => 'Post Submit Action',
      'page callback' => 'contextual_annotation_annotate_form_success',
      'page arguments' => array(1,3,4,5,6),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * A modal form callback.
 */
function contextual_annotation_annotate_form($js = NULL, $nid = NULL, $type = NULL, $key = NULL) {
	
	// Fall back if $js is not set.
  if (!$js) {
    return drupal_get_form('contextual_annotation_edit', array('nid' => $nid, 'type' => $type, 'key' =>$key));
  }

  ctools_include('ajax');
  ctools_include('modal');
  
  $form_state = array(
    'title' => t('Add Annotation'),
    'ajax' => TRUE,
    'nid' => $nid,
    'type' => $type,
    'key' => $key
  );
  
  $output = ctools_modal_form_wrapper('contextual_annotation_edit', $form_state);
  if (empty($output)) {
    // empty $output signifies success, so we'll use it as our $commands
    $output = array();
    $output[] = dialog_command_display(t('Annotation Saved'), t('(Reloading page)'));
    $output[] = ctools_ajax_command_reload();
  }
  ctools_ajax_render($output);
}

/**
 * Post-submit processor
 */
function contextual_annotation_annotate_form_success($js, $action) {
  if (!$js) {
    // we should never be here out of ajax context
    return MENU_NOT_FOUND;
  }

  ctools_include('ajax');
  $commands = array();
  $commands[] = ctools_ajax_command_reload();
  
  ctools_ajax_render($commands);
}


/**
 * Implementation of hook_scholar_admin_link() on behalf of the node module.
 */
function contextual_annotation_vsite_admin_link($type, $object) {
  $links = array();
  if ($type == 'node') {

    if (node_access('edit contextual annotation', $object)) {
    	//Example adding by tid
      $links['node-contextual-annotation'] = array(
        'title' => t('Edit Contextual Note to Term'),
        'href' => 'contextual_annotation/nojs/annotate/'.$object -> nid.'/taxonomy/'.contextual_annotation_get_key('taxonomy',$object,'tid'),
	      'attributes' => array(
	        'class' => 'ctools-use-dialog edit-link'
	      ),
        'query' => array('destination' => $_GET['q']),
      );
    }
  }
  return $links;
}


/**
 * Implementation of hook_plugin_ctools_api().
 */
function contextual_annotation_ctools_plugin_api($owner, $api) {
  if ($owner == 'contextual_annotation' && $api == 'type') {
    return array(
      'version' => 1,
      'path' => 'includes',
    );
  }
}

/**
 * Implementation of hook_ctools_plugin_type().
 */
function contextual_annotation_ctools_plugin_type() {
  return array(
    'cache' => TRUE,
    'use hooks' => TRUE
  );
}


/**
 * Implementation of hook_purl_processor().
 */
function contextual_annotation_contextual_annotation_type() {
  
	$info = array();
	$info['annotation_interface'] = array(
    'handler' => array(
      'class' => 'annotation_interface',
      'file' => 'annotation_interface.inc',
      'path' => drupal_get_path('module', 'contextual_annotation') .'/includes',
    ),
  );
  
  $info['taxonomy'] = array(
    'title' => t('Taxonomy'),
    'handler' => array(
      'class' => 'contextual_annotation_taxonomy',
      'file' => 'taxonomy.inc',
      'path' => drupal_get_path('module', 'contextual_annotation') .'/includes',
      'parent' => 'annotation_interface',
    ),
  );
  $info['context'] = array(
    'title' => t('Context'),
    'handler' => array(
      'class' => 'contextual_annotation_context',
      'file' => 'context.inc',
      'path' => drupal_get_path('module', 'contextual_annotation') .'/includes',
      'parent' => 'annotation_interface',
    ),
  );
  return $info;
}

/**
 * Factory function to ease instantiation of type classes.
 */
function contextual_annotation_get_type($type) {
  static $cache;
  if (!isset($cache[$type])) {
    ctools_include('plugins');
    $class = ctools_plugin_load_class('contextual_annotation', 'type', $type, 'handler');
    $cache[$type] = new $class();
  }
  return isset($cache[$type]) ? $cache[$type] : NULL;
}

/**
 * Form contextual_annotation edit form.
 *
 * @ingroup forms
 * @see taxonomy_form_term_submit()
 */
function contextual_annotation_edit(&$form_state, $edit = array()) {
  
	$o_annotation = contextual_annotation_get_annotation($form_state['type'],$form_state['key'],$form_state['nid']);
	$edit += array(
    'key' => $form_state['key'],
    'type' => $form_state['type'],
    'nid' => $form_state['nid'],
    'annotation' => ($o_annotation)?$o_annotation->annotation:NULL,
	  'position' => ($o_annotation)?$o_annotation->position:NULL,
  );

  $annotation_type = contextual_annotation_get_type($edit['type']);
  
  $form['annotation'] = array(
    '#type' => 'textarea',
    '#title' => t('Annotation'),
    '#default_value' => $edit['annotation'],
    '#maxlength' => 1024,
    '#required' => FALSE);
  
  $form['position'] = array(
	  '#type' => 'select',
	  '#title' => t('Position'),
	  '#default_value' => $edit['position']?$edit['position']:'prefix',
	  '#options' => array(
	    'prefix' => t('Before the Teaser'),
	    'suffix' => t('After the Teaser'),
	  ),
	);

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $edit['nid']);
  
  $form['key'] = array(
    '#type' => 'value',
    '#value' => $edit['key']);
  
  $form['type'] = array(
    '#type' => 'value',
    '#value' => $edit['type']);
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'));

  return $form;
}

/**
 * Submit handler to insert or update a annotation.
 *
 * @see contextual_annotation_edit()
 */
function contextual_annotation_edit_submit($form, &$form_state) {
  //Add or remove the annotation
  $values = $form_state['values'];
  $existing = contextual_annotation_get_annotation($values['type'],$values['key'],$values['nid']);
  if(strlen(trim($values['annotation']))){
  	//Add / Update
  	if($existing){
  		//Update
  		contextual_annotation_update_annotation($values['type'],$values['key'],$values['nid'],$values['annotation'],$values['position']);
  	}else{
  		//Add
  		contextual_annotation_add_annotation($values['type'],$values['key'],$values['nid'],$values['annotation'],$values['position']);
  	}
  }elseif ($existing){
  	//DELETE
  	contextual_annotation_delete_annotation($values['type'],$values['key'],$values['nid']);
  }
  
	return;
}

/**
 * Get a annotation
 * @param string $type
 * @param string $key
 * @param number $nid
 */
function contextual_annotation_get_annotation($type,$key, $nid){
	static $cached_annotations = array();
	
	if(!strlen($type) || !strlen($key) || !$nid) return false; //No need
	
	if(!isset($cached_annotations[$type."-".$key."-".$nid])){
		
		$cached_annotations[$type."-".$key."-".$nid] = db_fetch_object(db_query("SELECT annotation, position, annotation_key as 'key', annotation_type as 'type', nid FROM {contextual_annotation} WHERE annotation_key = '%s' AND annotation_type = '%s' AND nid = %d ",array($key,$type,$nid)));
	}
	
	return $cached_annotations[$type."-".$key."-".$nid];
}

/**
 * Delete a annotation
 * @param string $type
 * @param string $key
 * @param number $nid
 */
function contextual_annotation_delete_annotation($type,$key, $nid){
  
  if(!strlen($type) || !strlen($key) || !$nid) return false; //No need

  return db_query("DELETE FROM {contextual_annotation} WHERE annotation_key = '%s' AND annotation_type = '%s' AND nid = %d LIMIT 1 ",array($key,$type,$nid));
  
}

/**
 * Delete all annotations for a node
 * @param string $type
 * @param string $key
 * @param number $nid
 */
function contextual_annotation_delete_node_annotations($nid){
  
  if(!$nid) return false; //No need

  return db_query("DELETE FROM {contextual_annotation} WHERE nid = %d ",array($nid));
  
}

/**
 * Update a annotation
 * @param string $type
 * @param string $key
 * @param number $nid
 */
function contextual_annotation_update_annotation($type,$key, $nid, $annotation, $pos = null){
  
  if(!strlen($type) || !strlen($key) || !$nid || !strlen(trim($annotation))) return false; //No need

  return db_query("UPDATE {contextual_annotation} SET annotation = '%s', position = '%s' WHERE annotation_key = '%s' AND annotation_type = '%s' AND nid = %d LIMIT 1 ",array(trim($annotation), $pos, $key,$type,$nid));
  
}

/**
 * Update a annotation
 * @param string $type
 * @param string $key
 * @param number $nid
 */
function contextual_annotation_add_annotation($type,$key, $nid, $annotation, $pos = null){
  
  if(!strlen($type) || !strlen($key) || !$nid || !strlen(trim($annotation))) return false; //No need

  return db_query("INSERT INTO {contextual_annotation} SET annotation = '%s', annotation_key = '%s', annotation_type = '%s', nid = %d, position = '%s' ",array(trim($annotation),$key,$type,$nid,$pos));
  
}

function contextual_annotation_get_key($type, $node){
	$annotation_type = contextual_annotation_get_type($type);
	
	$args = func_get_args();
	array_shift($args); //Remove $type
	array_shift($args); //Remove $node
	
	return $annotation_type->get_key($node,$args);
}