<?php
// $Id: apachesolr_biblio.module,v 1.1.2.2 2009/11/23 15:58:21 robertDouglass Exp $

function apachesolr_biblio_menu() {
  $items = array();
  $items['admin/settings/biblio/solr'] = array(
    'title' => 'Solr index',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_biblio_fields_form'),
    'access arguments' => array('administer biblio'),
    'file' => 'apachesolr_biblio.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );
  $items['admin/settings/biblio/solr/import'] = array(
    'title' => 'Import Fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_biblio_default_fields_import_form'),
    'access arguments' => array('administer biblio'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'apachesolr_biblio.export.inc',
    'weight' => 2,
  );
  $items['admin/settings/biblio/solr/export'] = array(
    'title' => 'Export Fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_biblio_default_fields_export_form'),
    'access arguments' => array('administer biblio'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'apachesolr_biblio.export.inc',
    'weight' => 3,
  );
  return $items;
}

function apachesolr_biblio_theme() {
  return array(
    'apachesolr_biblio_fields_form' => array(
        'file' => 'apachesolr_biblio.admin.inc',
        'arguments' => array('form'),
    ),
  );
}

// These are the fields as biblio knows about them
function apachesolr_biblio_get_raw_fields() {
  // get all of the field info
  $fields = array();
  $result = db_query("SELECT bf.fid, bf.name, bf.type, bftd.title
                      FROM {biblio_fields} AS bf
                      INNER JOIN {biblio_field_type} AS bft ON bft.fid = bf.fid
                      INNER JOIN {biblio_field_type_data} AS bftd ON bftd.ftdid = bft.ftdid
                      WHERE bft.tid = 0
                      ORDER BY bft.weight DESC");
  while ($row = db_fetch_array($result)) {
    $fields[$row['fid']] = $row;
  }
  return $fields;
}

// These are the fields as apachesolr_biblio knows abouit them.
function apachesolr_biblio_get_fields() {
  // get current settings
  $result = db_query("SELECT * FROM {apachesolr_biblio_fields}");
  $fields = array();
  while ($row = db_fetch_array($result)) {
    $fields[$row['fid']] = $row;
  }
  // If there aren't any fields defined, load any default fields
  if(empty($fields)) {
    foreach(module_implements('default_biblio_fields') as $module) {
      $default_fields = module_invoke($module, 'default_biblio_fields');
      if(!empty($default_fields)) {
        foreach($default_fields as $field) {
          $fields[$field['fid']] = $field;
        }
      }
    }
  }
  $fields['contributors'] = variable_get('apachesolr_biblio_index_authors', 1);
  return $fields;
}

/**
 * Load a single field either by name or by field ID.
 *
 * @param string $name
 *   The name of the field.
 * @param int $fid
 *   The field id.
 */
function apachesolr_biblio_get_field($name = NULL, $fid = NULL) {
  $fields = apachesolr_biblio_get_fields();
  if (isset($name)) {
    foreach($fields as $fid => $field) {
      if($field['name'] == $name) {
        return $field;
      }
    }
  }
  elseif (isset($fid)) {
    return $fields[$fid];
  }
  return FALSE;
}


function apachesolr_biblio_apachesolr_update_index(&$document, $node) {
  // Only do stuff with biblio nodes.
  if ($node->type != 'biblio') {
    return;
  }
  $tz = date_default_timezone_name();
  date_default_timezone_set('UTC');
  $fields = apachesolr_biblio_get_fields();
  foreach ($fields as $fid => $biblio) {
    if ($biblio['indexed'] && isset($node->{$biblio['name']})) {
      $biblio['multiple'] = ($biblio['index_type'] == 'date') ? TRUE : FALSE;
      $index_key = apachesolr_index_key($biblio);
      $value = NULL;
      if ($value = apachesolr_biblio_format_value($node->{$biblio['name']}, $biblio['index_type'])) {
        if (is_array($value)) {
          // The $biblio_sort variable exists just to build the $sort_index_key.
          // The $sort_index_key exists so that results can later be sorted
          // by the first value of this field. Citations often have many
          // values for fields and we therefore use the first value as the
          // sort value, building a special field just for this purpose.
          // Note that we make a ss_ field and that gets turned into a sort
          // field automatically due to schema.xml processing.
          // TODO: Add a checkbox on the field configuration screen that
          // indicates whether a field should have a sort, or not.
          // TODO: Add sorts to the $query object.
          $biblio_sort = FALSE;
          if ($biblio['multiple']) {
            $biblio_sort = $biblio;
            $biblio_sort['multiple'] = FALSE;
            $sort_index_key = 'ss_' . $biblio['name'];
          }
          $first = TRUE;
          foreach($value as $v) {
            if ($first) {
              $document->$sort_index_key = $v;
              $first = FALSE;
            }
            $document->setMultiValue($index_key, $v);
          }
        }
        else {
          $document->$index_key = apachesolr_clean_text($value);
        }
      }
    }
  }
  date_default_timezone_set($tz);
  // Handle authors.
  if (variable_get('apachesolr_biblio_index_authors', 1)) {
    $value = array();

    foreach ($node->biblio_contributors as $arrays) {
      $first = TRUE;
      foreach ($arrays as $contributor_node) {
        if (isset($contributor_node['name'])) {
          if ($author = trim(apachesolr_clean_text($contributor_node['name']))) {
            if ($first) {
              // Set the first name to sort_ss_biblio_first_author
              $first = FALSE;
              $document->sort_ss_biblio_first_author = $author;
            }
            $document->setMultiValue('sm_biblio_contributors', $author); //Used for Facets
            $document->setMultiValue('tm_biblio_contributors', $author); //Used for text searching
          }
        }
      }
    }
  }
}

function apachesolr_biblio_format_value($value, $format) {
  switch ($format) {
    case 'string':
      // Do nothing
      return $value;

    case 'date':
      // Dates have lots of special cases.
      // First, there are four identified formats that have to be taken care of.
      // 1999           represents 12 months in the year
      // 1999 Mar
      // 1999 Mar 6
      // 1999 Mar-Jun   represents a range of months
      // 2005 Nov 21-27  A range of days.
      $values = array();
      $parts = array_filter(split(' ', $value));
      $months_lookup = array('jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec', 'jan');
      $months = isset($parts[1]) ? array_filter(split('-', $parts[1])) : NULL;
      $days = isset($parts[2]) ? array_filter(split('-', $parts[2])) : NULL;
      // This is the case that just a year is given, in which case we add 12
      // values, one for each month of the year.
      if (count($parts) == 1) {
        foreach (array_slice($months_lookup, 0, 12) as $m) {
          $values[] = apachesolr_date_iso(strtotime("$m $value"));
        }
      }
      // In this case, there is a range of months.
      else if (count($months) > 1) {
        $startpos = array_search(strtolower($months[0]), $months_lookup);
        $endpos = array_search(strtolower($months[1]), $months_lookup);
        $month_range = range($startpos, $endpos);
        $m = 0;
        foreach ($month_range as $m) {
          $v = $months_lookup[$m] . " {$parts[0]}";
          $values[] = apachesolr_date_iso(strtotime($v));
        }
        if ($m) {
          // Cap off the last month. Advance the month by one...
          $v = $months_lookup[$m + 1];
          // 11 is December!
          if ($m == 11) {
            // We have to advance the year, too.
            $y = $parts[0] +1;
          }
          else {
            $y = $parts[0];
          }
          $v .= " $y";
          // ... and then shave one second off so that it is still in the last month.
          $values[] = apachesolr_date_iso(strtotime($v) - 1);
        }
      }
      // In this case there is a range of days. Add the first day.
      else if (count($days) > 1) {
        $values[] = apachesolr_date_iso(strtotime("{$parts[1]} {$days[0]}, {$parts[0]}"));
      }
      else {
        $parts = array_filter($parts);
        if (count($parts) == 2) {
          $v = "{$parts[1]} {$parts[0]}";
        }
        elseif (count($parts) == 3) {
          $v = "{$parts[1]} {$parts[2]}, {$parts[0]}";
        }
        $values[] = apachesolr_date_iso(strtotime($v));
      }

      return $values;
  }
}

/**
 * Implementation of hook_apachesolr_facets().
 *
 * Returns an array keyed by block delta.
 */
function apachesolr_biblio_apachesolr_facets() {
  // Static caching because every biblio facet block can
  // potentially call this function.
  static $facets = array();
  if (empty($facets)) {
    $fields = apachesolr_biblio_get_fields();
    foreach ($fields as $fid => $biblio) {
      if ($biblio['indexed']) {
        $key = apachesolr_index_key($biblio);
        $title = db_result(db_query("SELECT title FROM {biblio_field_type_data} WHERE ftdid = %d", $fid));
        $facets[$key] = array(
          'info' => t('Biblio: Filter by !title', array('!title' => $title)),
          'name' => $title,
          'facet_field' => $key,
          'content types' => array('biblio'),
        );
      }
    }
    // Contributors are a special case.
    $facets['sm_biblio_contributors'] = array(
      'info' => t('Biblio: Filter by Citation Contributor'),
      'name' => 'Citation Contributor',
      'facet_field' => 'sm_biblio_contributors',
      'content types' => array('biblio'),
    );
  }
  return $facets;
}

/**
 * Implementation of hook_block().
 */
function apachesolr_biblio_block($op = 'list', $delta = 0, $edit = array()) {
  $module = 'apachesolr_biblio';
  switch ($op) {
    case 'list':
      $enabled_facets = apachesolr_get_enabled_facets($module);
      $facets = apachesolr_biblio_apachesolr_facets();
      // Add the blocks
      $blocks = array();
      foreach ($enabled_facets as $delta => $facet_field) {
        if (isset($facets[$delta])) {
          $blocks[$delta] = $facets[$delta] + array('cache' => BLOCK_CACHE_PER_PAGE,);
        }
      }
      return $blocks;

    case 'view':
      if (apachesolr_has_searched()) {
        // Get the query and response. Without these no blocks make sense.
        $response = apachesolr_static_response_cache();
        if (empty($response)) {
          return;
        }

        $facets = apachesolr_get_enabled_facets($module);
        if (empty($facets[$delta])) {
          return;
        }

        $query = apachesolr_current_query();
        if (!apachesolr_block_visibility($query, 'alzsearch', $delta)) {
          return;
        }

        $facets = apachesolr_biblio_apachesolr_facets();
        $biblio_year = $response->response->facet_counts->facet_fields->ss_biblio_year;
        if($biblio_year) {
          foreach($biblio_year as $property => $value) {
            $biblio_year = _biblio_text_year($property);
            unset($response->response->facet_counts->facet_fields->ss_biblio_year->$property);
            $response->response->facet_counts->facet_fields->ss_biblio_year->$biblio_year = $value;
          }
        }
        return apachesolr_facet_block($response, $query, $module, $delta, $delta, t('Filter by !field', array('!field' => $facets[$delta]['name'])));
      }
      break;

    case 'configure':
      return apachesolr_facetcount_form($module, $delta);

    case 'save':
      apachesolr_facetcount_save($edit);
      break;
  }
}

/**
 * Implementation of hook_features_api().
 */
function apachesolr_biblio_features_api() {
  return array(
    'apachesolr_biblio' => array(
      'default_hook' => 'default_biblio_fields',
      'features_source' => TRUE,
      'file' => drupal_get_path('module', 'apachesolr_biblio') . '/apachesolr_biblio.features.inc',
    ),
  );
}
