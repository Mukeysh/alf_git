<?php
// $Id: dyntextfield.module,v 1.2 2010/07/08 15:12:14 rbrandon Exp $

/**
* @file
* An dyntextfield to define a simple field, widget, and formatter.
* A module could define only a field, only a widget, only a
* formatter, or any combination. Widgets and formatters must
* declare what kind of field they work with, which can be any
* existing field as well as any new field the module creates.
*/

/**
 * Implementation of hook_menu().
 *
 * Here we define some built in links for the bkn module, links exposed are:
 *
 *
 */
function dyntextfield_menu() {
  $items = array(
    'dyntextfield/getKeys/js' => array(
      'title'             => 'Dynamic Keys Lookup',
      'page callback'     => 'dyntextfield_lookup_keys',
      'access arguments'  => array('access content'),
      'type'              => MENU_CALLBACK,
    )
  );

  return $items;
}

function dyntextfield_lookup_keys($s_table_name, $s_prefix){


  $matches = array();
  $result = db_query("SELECT DISTINCT %s_label as label FROM {content_".$s_table_name."} WHERE %s_label LIKE '%s' ORDER BY %s_label DESC LIMIT 20 ", $s_table_name,$s_table_name,$s_prefix."%",$s_table_name);

  while ($item = db_fetch_object($result)) {
    $matches[$item->label] = str_replace($s_prefix,"<b>$s_prefix</b>",$item->label);
  }

  print drupal_to_js($matches);
  exit();

}

//==========================================//
// DEFINING A FIELD
//==========================================//

/**
* Implementation of hook_field_info().
*/
function dyntextfield_field_info() {
  return array(
    // The machine name of the field,
    // no more than 32 characters.
    'dyntextfield' => array(
      // The human-readable label of the field that will be
      // seen in the Manage fields screen.
      'label' => t('Dynamic Text Field(s)'),
      // A description of what type of data the field stores.
      'description' => t('Store key/value pairs in the database.'),
      // An icon to use in Panels.
      'content_icon' => 'icon_content_text.png',
    ),
  );
}

/**
* Implementation of hook_field_settings().
*/
function dyntextfield_field_settings($op, $field) {
  switch ($op) {
    // Create the form element to be used on the field
    // settings form. Field settings will be the same for
    // all shared instances of the same field and should
    // define the way the value will be stored
    // in the database.
    case 'form':
      $form = array();
      $form['max_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum length'),
        '#default_value' => is_numeric($field['max_length']) ? $field['max_length'] : 255,
        '#required' => FALSE,

        // Use #element_validate to validate the settings.
        '#element_validate' => array('_dyntextfield_length_validate'),
        '#description' => t('The maximum length of the field in characters. Must be a number between 1 and 255'),
      );
      return $form;

    // Return an array of the names of the field settings
    // defined by this module. These are the items that
    // CCK will store in the field definition
    // and they will be available in the $field array.
    // This should match the items defined in 'form' above.
    case 'save':
      return array('max_length');

    // Define the database storage for this field using
    // the same construct used by schema API. Most fields
    // have only one column, but there can be any number
    // of different columns. After the schema API values,
    // add two optional values to each column,
    //  'views', to define a Views field
    //  'sortable', to add a Views sort field
    case 'database columns':
      $columns['label'] = array(
        'type' => 'varchar',
        'length' => is_numeric($field['max_length']) ? $field['max_length'] : 255,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );
      $columns['value'] = array(
        'type' => 'varchar',
        'length' => is_numeric($field['max_length']) ? $field['max_length'] : 255,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );
      return $columns;

    // Optional: Make changes to the default $data array
    // created for Views. Omit this if no changes are
    // needed, use it to add a custom handler or make
    // other changes.
    case 'views data':
      // Start with the $data created by CCK
      // and alter it as needed. The following
      // code illustrates how you would retrieve
      // the necessary data.
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);
      $field_data = $data[$table_alias][$field['field_name'] .'_value'];
      // Make changes to $data as needed here.
      return $data;
  }
}

/**
* Custom validation of settings values.
*
* Create callbacks like this to do settings validation.
*/
function _dyntextfield_length_validate($element, &$form_state) {
  $value = $form_state['values']['max_length'];
  if ($value && !is_numeric($value)|| $value < 1 || $value > 255) {
    form_set_error('max_length', t('"Max length" must be a number between 1 and 255.'));
  }
}

/**
* Implementation of hook_field().
*/
function dyntextfield_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    // Do validation on the field values here. The widget
    // will do its own validation and you cannot make any
    // assumptions about what kind of widget has been used,
    // so don't validate widget values, only field values.
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          // The error_element is needed so that CCK can
          // set an error on the right sub-element when
          // fields are deeply nested in the form.
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
          if (!empty($item['value'])) {
            if (!empty($field['max_length']) && drupal_strlen($item['value']) > $field['max_length']) {
              form_set_error($error_element, t('%name: the value may not be longer than %max characters.', array('%name' => $field['widget']['label'], '%max' => $field['max_length'])));
            }
          }
        }
      }
      return $items;

    // This is where you make sure that user-provided
    // data is sanitized before being displayed.
    case 'sanitize':
      foreach ($items as $delta => $item) {
        $dyntext_label = check_plain($item['label']);
        $dyntext_value = check_plain($item['value']);
        $dyntext_value = check_markup($dyntext_value, 'filter_urlfilter');
        $items[$delta]['safe'] = $dyntext_label.": ".$dyntext_value;
        $items[$delta]['safe_label'] = $dyntext_label;
        $items[$delta]['safe_value'] = $dyntext_value;
      }
     break;
     case 'insert':
     case 'update':
       // If there was an AHAH add more button in this field, don't save it.
       unset($items[$field['field_name'] .'_add_more']);

       //Prepare for DB Save (move from fieldset)
      foreach ($items as $delta => $item) {
        if(!array_key_exists('dyntext_fieldset',$item)){
          unset($items[$delta]);
          continue;
        }
        foreach ($item['dyntext_fieldset'] as $key => $value){
          $items[$delta][$key] = $value;
        }
      }
     break;

  }
}

/**
* Implementation of hook_content_is_empty().
*
* CCK has no way to know if something like a zero is
* an empty value or a valid value, so return
* TRUE or FALSE to a populated field $item array.
* CCK uses this to remove empty multi-value elements
* from forms.
*/
function dyntextfield_content_is_empty($item, $field) {
  if(array_key_exists('dyntext_fieldset',$item)){
    if(empty($item['dyntext_fieldset']['label'])) return true;
    return false;
  }elseif (empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}

/**
* Implementation of hook content_generate().
*
* Optional, provide dummy value for nodes created
* by the Devel Generate module.
*/
function dyntextfield_content_generate($node, $field) {
  $node_field = array();
  // Generate a value that respects max_length.
  if (empty($field['max_length'])) {
    $field['max_length'] = 12;
  }
  $node_field['value'] = user_password($field['max_length']);
  return $node_field;
}

/**
* Implementation of hook_token_list()
* and hook_token_values().
*
* Optional, provide token values for this field.
*/
function dyntextfield_token_list($type = 'all') {
  if ($type == 'field' || $type == 'all') {
    $tokens = array();

    $tokens['dyntextfield']['raw']       = t('Raw, unfiltered text');
    $tokens['dyntextfield']['formatted'] = t('Formatted and filtered text');

    return $tokens;
  }
}

function dyntextfield_token_values($type, $object = NULL) {
  if ($type == 'field') {
    $item = $object[0];

    $tokens['raw']  = $item['value'];
    $tokens['formatted'] = isset($item['view']) ? $item['view'] : '';
    return $tokens;
  }
}

//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
* Implementation of hook_theme().
*/
function dyntextfield_theme() {
  return array(
    // Themes for the formatters.
    'dyntextfield_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'dyntextfield_formatter_plain' => array(
      'arguments' => array('element' => NULL),
    ),
    //theme for the form
    'dyntextfield_form_table' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
* Implementation of hook_field_formatter_info().
*
* All fields should have a 'default' formatter.
* Any number of other formatters can be defined as well.
* It's nice for there always to be a 'plain' option
* for the raw value, but that is not required.
*
*/
function dyntextfield_field_formatter_info() {
  return array(
    // The machine name of the formatter.
    'default' => array(
      // The human-readable label shown on the Display
      // fields screen.
      'label' => t('Default'),
      // An array of the field types this formatter
      // can be used on.
      'field types' => array('dyntextfield'),
      // CONTENT_HANDLE_CORE:   CCK will pass the formatter
      // a single value.
      // CONTENT_HANDLE_MODULE: CCK will pass the formatter
      // an array of all the values. None of CCK's core
      // formatters use multiple values, that is an option
      // available to other modules that want it.
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'plain' => array(
      'label' => t('Plain text'),
      'field types' => array('dyntextfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
* Theme function for 'default' dyntextfield field formatter.
*
* $element['#item']: the sanitized $delta value for the item,
* $element['#field_name']: the field name,
* $element['#type_name']: the $node->type,
* $element['#formatter']: the $formatter_name,
* $element'#node']: the $node,
* $element['#delta']: the delta of this item, like '0',
*
*/
function theme_dyntextfield_formatter_default($element) {
  return "<span class='dyntext_label field-label'>".$element['#item']['safe_label'].":</span>"."&nbsp;"
        ."<span class='dyntext_value'>".$element['#item']['safe_value']."</span>";
}

/**
* Theme function for 'plain' dyntextfield field formatter.
*/
function theme_dyntextfield_formatter_plain($element) {
  return strip_tags($element['#item']['safe']);
}

/**
 *
 */
function theme_dyntextfield_form_table($form) {

  foreach ($form as $key => $value) {
    if (substr($key,0,1) == '#') continue;
    $content .= drupal_render($form[$key]);
  }

  return $content;

}

//==========================================//
// DEFINING A WIDGET
//==========================================//

/**
* Implementation of hook_widget_info().
*
* Here we indicate that the content module will handle
* the default value and multiple values for these widgets.
*
* Callbacks can be omitted if default handing is used.
* They're included here just so this module can be used
* as an dyntextfield for custom modules that might do things
* differently.
*/
function dyntextfield_widget_info() {
  return array(
    // The machine name of the widget, no more than 32
    // characters.
    'dyntextfield_widget' => array(
      // The human-readable label of the field that will be
      // seen in the Manage fields screen.
      'label' => t('Dynamic Textfield Widget'),
      // An array of the field types this widget can be
      // used with.
      'field types' => array('dyntextfield'),
      // Who will handle multiple values, default is core.
      // 'CONTENT_HANDLE_MODULE' means the module does it.
      // See optionwidgets for an example of a module that
      // handles its own multiple values.
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        // Who will create the default value, default is core.
        // 'CONTENT_CALLBACK_CUSTOM' means the module does it.
        // 'CONTENT_CALLBACK_NONE' means this widget has
        // no default value.
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
    'dyntextfield_textareawidget' => array(
      'label' => t('Dynamic TextArea Widget'),
      'field types' => array('dyntextfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
* Implementation of hook_widget_settings().
*/
function dyntextfield_widget_settings($op, $widget) {
  switch ($op) {
    // Create the form element to be used on the widget
    // settings form. Widget settings can be different
    // for each shared instance of the same field and
    // should define the way the value is displayed to
    // the user in the edit form for that content type.
    case 'form':
      $form = array();
      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
      $form['size'] = array(
        '#type' => 'textfield',
        '#title' => t('Size of textfield'),
        '#default_value' => $size,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#required' => TRUE,
      );
      return $form;

    // Return an array of the names of the widget settings
    // defined by this module. These are the items that
    // CCK will store in the widget definition and they
    // will be available in the $field['widget'] array.
    // This should match the items defined in 'form' above.
    case 'save':
      return array('size');
  }
}


/**
* Implementation of hook_widget().
*
* Attach a single form element to the form.
*
* CCK core fields only add a stub element and builds
* the complete item in #process so reusable elements
* created by hook_elements can be plugged into any
* module that provides valid $field information.
*
* Custom widgets that don't care about using hook_elements
* can be built out completely at this time.
*
* If there are multiple values for this field and CCK is
* handling multiple values, the content module will call
* this function as many times as needed.
*
* @param $form
*   the entire form array,
*   $form['#node'] holds node information
* @param $form_state
*   the form_state,
*   $form_state['values'][$field['field_name']]
*   holds the field's form values.
* @param $field
*   the field array
* @param $items
*   array of default values for this field
* @param $delta
*   the order of this item in the array of
*   subelements (0, 1, 2, etc)
*
* @return
*   the form item for a single element for this field
*/
function dyntextfield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array();

  $element['dyntext_fieldset'] = array (
    '#type' => 'fieldset',
    '#theme' => 'dyntextfield_form_table'
  );

  $element['dyntext_fieldset']['label'] = array(
    '#title' => t('Field Name'),
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['label']) ? $items[$delta]['label'] : NULL,
    '#autocomplete_path' => 'dyntextfield/getKeys/js/'.$field['field_name'],
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 20,
    '#attributes' => array('class' => 'dyntextfield'),
    '#maxlength' => !empty($field['max_length']) ? $field['max_length'] : NULL,
  );

  $element['dyntext_fieldset']['value'] = array(
    '#title' => t('Field Value'),
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#attributes' => array('class' => 'dyntextfield'),
    '#maxlength' => !empty($field['max_length']) ? $field['max_length'] : NULL,
  );

  switch($field['widget']['type']){
    case 'dyntextfield_textareawidget':
      $element['dyntext_fieldset']['value']['#type'] = 'textarea';
    break;
    case 'dyntextfield_widget':
    default:
      $element['dyntext_fieldset']['value']['#type'] = 'textfield';
  }


  // Used so that hook_field('validate') knows where to
  // flag an error in deeply nested forms.
  if (empty($form['#parents'])) {
    $form['#parents'] = array();
  }
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($form['#parents'], array('value'))),
  );

  return $element;
}

function dyntextfield_form_alter(&$form, $form_state, $form_id) {

  // this next bit is to remove all the dyntextfield form elements when
  // pub type is not selected on a biblio form
  if ($form_id == "biblio_node_form") {
    if (!isset($form_state['values']['biblio_type']) &&
        empty($form_state['post']['biblio_type']) &&
        empty($form_state['submitted']) &&
        empty($form['vid']['#value'])) {

      foreach (element_children($form) as $form_element) {
        $widgets = element_children($form[$form_element]);
        if (count($widgets) && is_array($form[$form_element][current($widgets)]) && array_key_exists('dyntext_fieldset',$form[$form_element][current($widgets)])){
          $form[$form_element] = NULL;
        }
      }
    }
  }

  return $form;
}

/**
 * Provide an interface for exporting our fields to bibtex
 *
 * @param $pub object publication
 * @param $bibtex string
 */
function dyntextfield_biblio_bibtex_export_post($pub, &$bibtex){

  $node = node_load($pub->nid);
  $result = db_query("SELECT field_name  FROM {content_node_field_instance} WHERE `type_name` = '%s' AND `widget_type` = 'dyntextfield_widget' ",$pub->type);

  $i = 0;
  while($a_field = db_fetch_array($result)){
  	$s_field_name = $a_field['field_name'];
	  if(isset($node->$s_field_name) && is_array($node->$s_field_name)){
	  	foreach ($node->$s_field_name as $field){
	  		if(strlen($field['value'])) $bibtex .= _bibtex_format_entry('biblio_extra'.++$i, "{$field['label']}: {$field['value']}");
	  	}
	  }//Add these fields to the biblio export
  }
}

/**
 * Provide an interface for impoting our fields to the biblio type
 *
 * @param $entry array settings
 * @param $node array
 */
function dyntextfield_biblio_bibtex_import($entry, &$node){

  $result = db_query("SELECT field_name  FROM {content_node_field_instance} WHERE `type_name` = 'biblio' AND `widget_type` = 'dyntextfield_widget' ");
  $a_field = db_fetch_array($result);

  $i = 0;
  if($a_field){
  	$s_field_name = $a_field['field_name'];
  	$node[$s_field_name] = array();
  	while(array_key_exists("biblio_extra".++$i,$entry)){
  		list($s_key,$s_value) = split(":",$entry["biblio_extra".$i],2);
  		if(!strlen(trim($s_value))) $s_value = $s_key;
  		$node[$s_field_name][] = array('dyntext_fieldset' => array('label' => trim($s_key),'value' => trim($s_value)));
  	}
  }
}