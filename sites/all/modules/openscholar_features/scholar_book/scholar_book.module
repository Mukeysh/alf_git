<?php

/**
 * scholar_book.module
 *
 * Shows a "table of contents" widget when in a "book" context.
 * Implements spaces settings to allow users to select the toc location
 * (in the content area or as widget).
 *
 * @todo: book outline
 *
 *
 */

define("SCHOLAR_BOOK_MAXLEN", 50);   // how long are the node title in toc
define("SCHOLAR_BOOK_TOC_CONTENT", 1); // book toc in the content area


include_once('scholar_book.features.inc');

/**
 * Implementation of hook_menu()
 */
function scholar_book_menu(){
  $items['node/%node/booklet'] = array(
    'title' => 'Booklet Outline',
    'page callback' => 'scholar_book_outline_edit',
    'page arguments' => array(1),
    'access callback' => 'scholar_book_outline_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  $items['features/scholar_book'] = array(
    'title' => 'Book Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scholar_book_settings'),
    'access callback' => module_exists('spaces') ? 'spaces_access_admin' : 'user_access',
    'access arguments' => module_exists('spaces') ? array() : array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'scholar_book.pages.inc',
  );

  return $items;
}
/**
 * Check access for book outline view
 * @return
 *  TRUE if site admin or user 1, FALSE otherwise
 */
function scholar_book_outline_access($node){
  global $user;
  if ($user -> uid == '1') return true;
  $vsite = vsite_get_vsite();
  if ($vsite && $vsite->access_admin()) {
    $mlid = db_result(db_query("SELECT mlid from {book} WHERE nid = %d", $node -> nid));
    if($mlid){
      return true;
    }
  }
  return false;
}

/**
* Returns the book admin edit form to re-arrainge book hierarchy within a vsite
*/
function scholar_book_outline_edit($node){
  $path = drupal_get_path('module', 'book') . '/book.admin.inc';
  include_once($path);
  //get top level book
  $book_node = ($node -> book['plid'] == 0)  ? $node : node_load($node -> book['bid']);
  return drupal_get_form('book_admin_edit', $book_node);
}

/**
 * implementation of hook_init()
 */
function scholar_book_init(){
  drupal_add_css(drupal_get_path('module', 'scholar_book') .'/scholar-book.css');
}

/**
 * implementation of hook_link_alter
 */
function scholar_book_link_alter(&$links, $node){
  if (empty($links['book_add_child'])) {
    return;
  }
  // present it as a context link
  $links['book_add_child']['attributes']['class'] = 'context-button';
}

/**
 * toc main function, used for content area
 *
function _scholar_book_booktoc() {

  	$node = menu_get_object();
  	$node = node_load($node -> book['bid']);

    if ($node && book_type_is_allowed($node->type)) {
      // bloc subject will be the title of the top level node (as a link)
      $subject =  truncate_utf8($node -> title, SCHOLAR_BOOK_MAXLEN, $wordsafe = TRUE, $dots = TRUE);
      $block['subject'] = l($subject, "node/" . $node -> nid);
      $output = '';
      $max_recursions = MENU_MAX_DEPTH; //variable_get('booktoc_deep', 5)+2;
      $output .= _scholar_book_recursive($node->book['mlid'], $node->nid, $node->title, 1, $max_recursions, SCHOLAR_BOOK_MAXLEN, $node->book['mlid']);
      $block['content'] = $output;
      return $block;
    }
}


/**
 * toc helper function
 *
function _scholar_book_recursive( $mlid, $nid, $tit, $step, $max_recursions, $trimval, $mlid_start) {
  if ($step < $max_recursions) {
    $sql= "SELECT DISTINCT n.nid as nid, m.plid as plid, m.mlid as mlid,  n.title as title ,m.weight
           FROM {book} as b
           inner join {menu_links} as m ON b.mlid = m.mlid
           inner join {node} as n ON n.nid = b.nid
           WHERE m.plid = '%d'  AND n.status = 1
           ORDER by m.weight, n.title
           ";


    $children = db_query(db_rewrite_sql($sql), $mlid);
    //Do we need to show the root ?
    if ($mlid != $mlid_start) {
      $content .= "<li class=\"booktoc tree-level-". ($step - 1) ."\">" . l(truncate_utf8($tit, $trimval, TRUE, TRUE), 'node/'. $nid , $attributes = array(), $query = NULL, $fragment = NULL, $absolute = FALSE, $html = FALSE );
    }
    $step++;
    while ($child = db_fetch_object($children)) {
      $c .= _scholar_book_recursive($child->mlid, $child->nid, $child->title, $step, $max_recursions, $trimval, $mlid_start);
    }

    //now write content only if necessary
    if (strlen($c) > 2) {
      $content .= "<ul class=\"hierarchic\">\n". $c ."</ul>\n";
    }
    $output .= '</li>';

    return $content;
  }
  else {
    return '';
  }
}

/**
 * Implementation of hook_content_extra_fields.
 */
function scholar_book_content_extra_fields($type_name){
  if (book_type_is_allowed($type_name)) {
    $extras['booktoc'] = array(
      'label' => t('Book toc'),
      'description' => t('Book toc displayed when a node is viewed.'),
      'weight' => - 10
    );
    return $extras;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function scholar_book_nodeapi(&$node, $op, $teaser = NULL, $page = NULL){
  switch ($op) {
    case 'view' :
      if (book_type_is_allowed($node->type)) {
        if (scholar_book_toc_location() == SCHOLAR_BOOK_TOC_CONTENT){
          $block_toc = os_books_build_toc($node, true);
          //$output = theme_box($block_toc['subject'], $block_toc['content'], $region = 'main');
          $output = '<div class="book-menu"><h3 class="title">' . $block_toc['subject'] . '</h3>' . $block_toc['content'] . '</div>';
          $weight = content_extra_field_weight($node->type, 'booktoc');
          $node->content['booktoc'] = array(
            '#weight' => ! empty($weight) ? $weight : - 10,
            '#value' => $output
          );
        }
      }

      // unset the book navigation links
      if (module_exists('book') && book_type_is_allowed($node->type)) {
        unset($node->content['book_navigation']);
      }

      if (menu_get_object() === $node) {
        // set the context to the roob book node
        if (! empty($node->book['bid'])) {
          context_node_condition( node_load($node->book['bid']), 'view');
        }
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function scholar_book_form_alter(&$form, &$form_state, $form_id){

  // alter book forms  - new booklet
  if ($form['#id'] == 'node-form' && book_type_is_allowed($form['#node']->type)) {
    $node = $form['#node'];
    //adding new booklet
    if ((! isset($_GET['parent']) || empty($_GET['parent'])) && ! empty($form['book']) && ! $form['nid']['#value']) {
      // Fieldset mods
      $remove = array(
        '#type',
        '#title',
        '#attributes',
        'bid',
        'weight',
        'plid'
      );
      foreach ( $remove as $element ) {
        unset($form['book'][$element]);
      }

      $form['book']['plid']['#type'] = 'hidden';
      $form['book']['plid']['#value'] = - 1;

      $form['book']['bid']['#type'] = 'value';
      $form['book']['bid']['#value'] = 'new';

      $form['book']['weight']['#type'] = 'value';
      $form['book']['weight']['#value'] = 0;

      $form['title']['#title'] = t('Booklet Title');
    }

    //adding or editing child booklet page
    if (! empty($_GET['parent']) && ! empty($form['book']) || $form['nid']['#value']) {
      // Fieldset mods
      $form['title']['#title'] = t('Booklet page title');
      $form['book']['#weight'] = ! empty($form['body_field']['#weight']) ? $form['body_field']['#weight'] : 0;
      $form['book']['#title'] = t('Booklet information');
      $form['book']['#collapsible'] = TRUE;
      $form['book']['#collapsed'] = FALSE; // since this is new node user should always see options expanded by default


      if (! empty($form['book']['bid']['#options']))
        unset($form['book']['bid']['#options']['new']);

      //make existing ['bid'] element into a "value" and create new "item" element to display info to the user
      $val = $form['book']['bid']['#default_value']; //get the top level book id
      $form['book']['bid']['#type'] = 'value';
      $form['book']['bid']['#value'] = $val;

      //cleanup the other bid elements
      foreach ( $form['book']['bid'] as $key => $element ) {
        if (! in_array($key, array(
          '#type',
          '#value',
          '#description',
          '#options'
        ))) {
          unset($form['book']['bid'][$key]);
        }
      }

      //add a new form element to display info top level book to user
      $form['book']['top_level']['#type'] = 'item';
      $form['book']['top_level']['#value'] = '<p>' . t('This page will be posted to booklet: !booklet </strong>', array(
        '!booklet' => '<strong>' . $form['book']['bid']['#options'][$val] . '</strong>'
      )) . '</p>';
      $form['book']['top_level']['#weight'] = - 10;
      // $form['book']['top-level']['#title'] = t('Booklet');  // not needed
      // $form['book']['top-level']['#description'] =t('This page will be a part of the selected booklet.');  // not needed


      //customize plid form element
      $form['book']['plid']['#title'] = t('Parent item');
      $form['book']['plid']['#description'] = t('Set the parent item of this page. Your selection will determine the place where this page will reside in this booklet\'s hierarchy. You can think of the booklet\'s hierarchy as the "table of contents" for your booklet. You could select the top-level booklet itself or another page within the booklet. The maximum depth for a booklet and all child pages is 9.');

      //capture previous weight value
      $weight = $form['book']['weight']['#default_value'];

      //reset weight to a '#type' = 'value'
      unset($form['book']['weight']);
      $form['book']['weight']['#type'] = 'value';
      $form['book']['weight']['#value'] = $weight;

      // Filter book options by current space
      _scholar_book_options_filter($form);

    }
  }
}

/**
 * Function to filter the book options when add/edit a node
 * i.e. show only books which belong to the current space
 * @see scholar_book_form_alter()
 */
function _scholar_book_options_filter(&$form){

  if ($view = views_get_view('scholar_book_list')) {
    $view->set_display();
    $view->set_items_per_page(0);
    $view->execute();

    // Collect books in this space into an array
    $books = array();
    $books[$node->nid] = 1;
    if (is_array($view->result) && count($view->result)) {
      foreach ( $view->result as $row ) {
        $books[$row->nid] = 1;
      }
    }

    // Use collected array to filter options
    foreach ( $form['book']['bid']['#options'] as $k => $v ) {
      if (is_numeric($k) && ! isset($books[$k])) {
        unset($form['book']['bid']['#options'][$k]);
      }
    }
  }
}

/**
 * Implementation of hook_context_links_alter().
 */
function scholar_book_context_links_alter(&$links) {
  if (! empty ( $links ['book'] )) {
    $links ['book']['title'] =  'Add Booklet';
    if(arg(0) == 'documents'){
      $links ['book']['query'] =  drupal_get_destination();
    }
  }
}


/**
 * helper function to return vsite settings for book's toc location
 */
function scholar_book_toc_location() {
  if (variable_get('scholar_book_toc_location', 0) == 1) {
    return SCHOLAR_BOOK_TOC_CONTENT;
  }

  return false;
}
